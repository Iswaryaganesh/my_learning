#include <stdio.h>
#include<string.h>
#define MAX 100
char infix[MAX],stack[MAX],postfix[MAX]; int i,j = 0,top = -1;
int space();
void intopost();
void push();
char pop();
int precedence(char);
void print();

int main()
{
   printf("Enter the infix expression\n");
   scanf("%[^\n]s",infix);
   intopost();
   postfix[j++] = '\0';
   print();
   return 0;
}


int space()
{
    if(infix[i]==' ' || infix[i]=='\t')
    {
        return 1;
    }
    return 0;
}


void intopost()
{
    char x;
    for(i=0;i<strlen(infix);i++)
    { 
        if(!space())
        {
            switch(infix[i])
            {
            case '(':
                push();
                break;
            case ')':
                while((x = pop())!='(')
                {
                    postfix[j++] = x;
                }
                break;
            case '+':
            case '-':
            case '*':
            case '/':
            case '^':
                while(top!=-1 && precedence(stack[top])>=precedence(infix[i]))
                {
                    postfix[j++] = pop();
                }
                push();
                break;
            default:
            postfix[j++] = infix[i];
        }
        }
    }
    while(top!=-1)
    {
        postfix[j++] = pop();
    }
}

void push()
{
    if(top == MAX-1)
    {
        printf("Stack overflow\n");
        exit(1);
    }
    top++;
    stack[top] = infix[i];
}


char pop()
{
    char c;
    if(top == -1)
    {
        printf("Stack underflow\n");
        exit(1);
    }
    c = stack[top];
    top --;
    return c;
}

int precedence(char a)
{
    switch(a)
    {
    case '^':
    return 3;
    case '*':
    case '/':
    return 2;
    case '+':
    case '-':
    return 1;
    default:
    return 0;
    }
}

void print()
{
    for(i=0;i<strlen(postfix);i++)
    {
        printf("%c",postfix[i]);
    }
}